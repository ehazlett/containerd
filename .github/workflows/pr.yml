name: Pull Requests
on: [push]
jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: OS Deps
      run: |
        sudo apt-get update && sudo apt-get install -y \
                btrfs-tools \
                libnl-3-dev \
                libnet-dev \
                protobuf-c-compiler \
                python-minimal \
                libcap-dev \
                libaio-dev \
                libprotobuf-c-dev \
                libprotobuf-dev \
                socat

    - name: Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12.7
      id: go

    - name: Checkout (containerd/containerd)
      uses: actions/checkout@v1
      with:
        path: go/src/github.com/containerd/containerd

    - name: Checkout (containerd/project)
      uses: actions/checkout@v1
      with:
        repository: containerd/project
        path: go/src/github.com/containerd/project
        ref: master

    - name: Project Dependencies
      env:
        GOOS: linux
        GOPATH: /home/runner/work/containerd/go
      run: |
        go version
        export PATH=$PATH:$GOPATH/bin
        echo $PWD
        go get -u github.com/vbatts/git-validation
        go get -u github.com/kunalkushwaha/ltag
        go get -u github.com/LK4D4/vndr
        sudo PATH=$PATH GOPATH=$GOPATH script/setup/install-protobuf
        sudo chmod +x /usr/local/bin/protoc
        sudo chmod og+rx /usr/local/include/google /usr/local/include/google/protobuf /usr/local/include/google/protobuf/compiler
        sudo chmod -R og+r /usr/local/include/google/protobuf/
        protoc --version
        if [ "$GOOS" = "linux" ]; then sudo PATH=$PATH GOPATH=$GOPATH script/setup/install-seccomp; fi
        if [ "$GOOS" = "linux" ]; then sudo PATH=$PATH GOPATH=$GOPATH script/setup/install-runc; fi
        if [ "$GOOS" = "linux" ]; then sudo PATH=$PATH GOPATH=$GOPATH script/setup/install-cni; fi
        if [ "$GOOS" = "linux" ]; then sudo PATH=$PATH GOPATH=$GOPATH script/setup/install-critools; fi
        if [ "$GOOS" = "linux" ]; then wget https://github.com/checkpoint-restore/criu/archive/v3.12.tar.gz -O /tmp/criu.tar.gz ; fi
        if [ "$GOOS" = "linux" ]; then tar -C /tmp/ -zxf /tmp/criu.tar.gz ; fi
        if [ "$GOOS" = "linux" ]; then pushd /tmp/criu-3.12 && sudo make install-criu ; popd ; fi

    - name: Test
      env:
        GOOS: linux
        GOPATH: /home/runner/work/containerd/go
      run: |
        echo $PWD
        export PATH=$PATH:$GOPATH/bin
        DCO_VERBOSITY=-q ../project/script/validate/dco
        ../project/script/validate/fileheader ../project/
        ../project/script/validate/vendor
        GOOS=linux script/setup/install-dev-tools
        go build -i .
        make check
        if [ "$GOOS" = "linux" ]; then make check-protos check-api-descriptors; fi
        make build
        make binaries
